/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jeholee <jeholee@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/26 02:23:02 by jeholee           #+#    #+#             */
/*   Updated: 2023/02/26 19:22:45 by jeholee          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include<unistd.h>
#include<fcntl.h>
#include<stdlib.h>
#include<stdio.h>

typedef struct s_numset t_numset;
int             ft_strlen(char *str);
char            *ft_strcpy(char *dest, char *src);
char            *ft_strdup(char *src);
char	        *ft_whitespace(char *str);
int	            ft_strcmp(char *s1, char *s2);
int	            ft_atoi(char *str);
t_numset        *init(void);
t_numset        *get_num_node(char *str, int len, int val);
int             numset_add(char *str, int len, int val, t_numset *head);
long long int   countline(char *filename);
char            *store_line(int fd1, int fd2);
char            **split_line(char *str);
int	        numset_insert_sort_dec(t_numset *head, t_numset *new_node);
void	        numset_insert_sort_asc(t_numset *head, t_numset *new_node);
int	            is_under_correct(int n);
int	            is_num_digits(char *str);
int	            dict_parsing_arr(t_numset *head, char **t_under, int *fd, int num_len);

struct s_numset
{
    char            *str;
    int             len;
    int             val;
    struct s_numset *next;
};

char    ***read_file(char *file, long long int *line)
{
    int             fd1;
    int             fd2;
    int             tmp;
    char            ***dict;
    *line = countline(file);
    dict = (char ***)malloc(sizeof(char **) * (*line));
    fd1 = open(file, O_RDONLY);
    fd2 = open(file, O_RDONLY);
    tmp = 0;
    while(tmp < *line)
    {
        dict[tmp] = split_line(store_line(fd1, fd2));
        tmp++;
    }
    close(fd1);
    close(fd2);
    return (dict);
}

int	ft_str_is_numeric(char *str)
{
	while (*(str))
	{	
		if (!(*(str) >= '0' && *(str) <= '9'))
			return (0);
		str++;
	}
	return (1);
}


int chk_dict(char ***dict, long long int line)
{
    int i;
    int j;
    i = 0;
    while (i < line)
    {
        j = i + 1;
        while (j < line)
        {
            if (ft_strcmp(dict[i][0], dict[j][0]) == 0)
                return (1);
            j++;
        }
        i++;
    }
    return (0);
}

int	ft_strcmp(char *s1, char *s2)
{
	while (*(s1) || *(s2))
	{
		if (*(s1) != *(s2))
			return (*(s1) - *(s2));
		s1++;
		s2++;
	}
	return (0);
}

char	*ft_strcpy(char *dest, char *src)
{
	char	*r_dest;

	r_dest = dest;
	while (*(src))
		*(dest++) = *(src++);
	*(dest) = '\0';
	return (r_dest);
}

int ft_strlen(char *str)
{
    int i;
    i = 0;
    while (str[i])
        i++;
    return (i);
}

char    *ft_strdup(char *src)
{
    char    *tmp;
    int     len;
    int     i;
    len = ft_strlen(src);
    tmp = (char *)malloc(len + 1);
    i = 0;
    while (i < len)
    {
        tmp[i] = src[i];
        i++;
    }
    tmp[len] = '\0';
    return (tmp);
}

char	*ft_whitespace(char *str)
{
	while ((*(str) >= 8 && *(str) <= 13) || *(str) == 32)
		str++;
	return (str);
}

int	ft_atoi(char *str)
{
	int	sign;
	int	r_num;

	sign = 1;
	r_num = 0;
	str = ft_whitespace(str);
	while (*(str) == '-' || *(str) == '+')
		if (*(str++) == '-')
			sign *= -1;
	while (*(str) >= '0' && *(str) <= '9')
	{
		r_num = r_num * 10 + (*(str) - '0');
		str++;
	}
	return (r_num * sign);
}

t_numset    *get_num_node(char *str, int len, int val)
{
    t_numset    *node;
    node = (t_numset *)malloc(sizeof(t_numset));
    if (node == 0)
        return (0);
    node->len = len;
    node->str = str;
    node->val = val;
    node->next = 0;
    return (node);
}

t_numset    *init(void)
{
    t_numset    *node;
    node = get_num_node(0, 0, 0);
    node->next = get_num_node(0, 0, 0);
    
    return (node);
}

int numset_add(char *str, int len, int val, t_numset *head)
{
    t_numset    *node;

    node = head->next;
    while (node->next)
        node = node->next;
    node->next = get_num_node(str, len, val);
    if (node->next == 0)
        return (0);
    return (1);
}

void	numset_insert_sort_asc(t_numset *head, t_numset *new_node)
{
	t_numset	*temp_node;
	t_numset	*node;

	node = head;
	while (node->next)
	{
		if (node->next->len > new_node->len)
		{
            if (ft_strcmp(node->next->str, new_node->str))
                return ;
			temp_node = node->next;
			node->next = new_node;
			new_node->next = temp_node;
			return ;
		}
        node = node->next;
	}
	node->next = new_node;
}

int	numset_insert_sort_dec(t_numset *head, t_numset *new_node)
{
	t_numset	*temp_node;
	t_numset	*node;

	node = head;
	while (node->next)
	{
		if (node->next->len < new_node->len)
		{
			temp_node = node->next;
			node->next = new_node;
			new_node->next = temp_node;
			return (1);
		}
        else if (node->next->len == new_node->len)
            return (0);
        node = node->next;
	}
	node->next = new_node;
    return (1);
}

long long int   countline(char *filename)
{
    int             fd;
    int             len;
    char            tmp;
    long long int   line;

    line = 0;
    len = 0;
    tmp = 'a';
    fd = open(filename, O_RDONLY);
    if (fd < 0)
        return (0);
    while (read(fd, &tmp, 1) > 0)
    {
        if (tmp == '\n')
        {
            if (len != 0)
                line++;
            len = 0;
        }
        else
            len++;
    }
    close(fd);
    return (line);
}
char    *store_line(int fd1, int fd2)
{
    unsigned long long  len;
    char                tmp;
    char                *arr;

    len = 0;
    tmp = 'a';
    while (tmp != '\n')
    {
        read(fd1, &tmp, 1);
        len++;
    }
    if (len == 1)
    {
        read(fd2, &tmp, 1);
        return (store_line(fd1, fd2));
    }
    arr = (char *)malloc(sizeof(char) * (len + 1));
    read(fd2, arr, len);
    arr[len - 1] = '\0';
    return (arr);
}

int	is_under_correct(int n)
{
	if ((n >= 0 && n <= 20)
		|| (n % 10 == 0 && (n / 10 >= 3 && n / 10 <= 10)))
		return (1);
	return (0);
}

int	is_num_digits(char *str)
{
	if (*(str++) != '1')
		return (0);
	while (*(str))
		if (*(str++) != '0')
			return (0);
	return (1);
}

void    print_node(t_numset *head)
{
    t_numset *node;

    node = head->next;
    while (node->next)
    {
        printf("%s ->", node->str);
        node = node->next;
    }
    printf("\n\n");
}

int	dict_parsing_arr(t_numset *head, char **t_under, int *fd, int num_len)
{
	long long		line;   
	char			**str;

	line = countline("numbers.dict");
	while (line-- > 0)
	{
		str = split_line(store_line(fd[0], fd[1]));
        num_len = ft_strlen(str[0]);
		if (num_len <= 3 && is_under_correct(ft_atoi(str[0])))
		{
			if (t_under[ft_atoi(str[0])] != 0)
				return (0);
			t_under[ft_atoi(str[0])] = ft_strdup(str[1]);
		}
		else if (num_len >= 4 && is_num_digits(str[0]) && (num_len % 3 == 1))
			if (numset_insert_sort_dec(head, get_num_node(str[1], ft_strlen(str[0]), 0)))
                return (0);
	}
	return (1);
}

char	**split_line(char *str)
{
	int		i;
	int		j;
	char	**tmp;

	i = 0;
	tmp = (char **)malloc(sizeof(char *) * 2);
	while (str[i] != ':')
		i++;
	j = 1;
	while (str[i - j] == ' ')
		j++;
	str[i - j + 1] = '\0';
	tmp[0] = ft_strdup(str);
	str += (i + 1);
	while (*str == ' ')
		str++;
	i = 0;
	while (str[i] != '\0')
		i++;
	tmp[1] = ft_strdup(str);
	return (tmp);
}

int     num_split(t_numset *head, char *str)
{
    int         str_len;
    t_numset    *node;

    str_len = ft_strlen(str);
    node = head->next;
    if (3 - (str_len % 3) 
    while (node->next)
    {

    }
}

int     a

int main(int argc, char *argv[])
{
    t_numset        *head;
	char			*map_three_less[101];
    int             i;
    long long int   line;
    int             fd[2];

    line = countline("numbers.dict");
    fd[0] = open("./numbers.dict", O_RDONLY);
    fd[1] = open("./numbers.dict", O_RDONLY);
    i = 0;
    head = init();
    while (i < 101)
        map_three_less[i++] = 0;
    if (dict_parsing_arr(head, map_three_less, fd, 0) == 0)
        printf("error");
    i = 0;
    while (i < 101)
    {
        printf("%s\n", map_three_less[i++]);
        //(void)numset_add(dict[i][1], ft_strlen(dict[i][0]), ft_atoi(dict[i][0]), head);
        // numset_insert_sort_dec(head, get_num_node(dict[i][1], ft_strlen(dict[i][0]), ft_atoi(dict[i][0])));
    }
    printf("\n");
    print_node(head);

    return (0);
}